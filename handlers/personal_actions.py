from aiogram import types
from dispatcher import dp
import keyboards as kb
import config
import re
from bot import BotDB

@dp.message_handler(commands = "start")
async def start(message: types.Message):
    if(not BotDB.user_exists(message.from_user.id)):
        BotDB.add_user(message.from_user.id)

    await message.bot.send_message(message.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–Ø –±—É–¥—É –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ —Å –º–∞–ª—ã—à–æ–º", reply_markup=kb.markup3)

    
@dp.message_handler(commands = "help")
async def info(message: types.Message):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    await message.reply("–ü–æ–∫–∞ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã\n/rise - –ø—Ä–æ—Å–Ω—É–ª—Å—è\n/fall - —É—Å–Ω—É–ª\n/h - –∏—Å—Ç–æ—Ä–∏—è\n\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏. –£–¥–∞—á–∏")
    

@dp.message_handler(commands = ("rise", "fall", "r", "f"), commands_prefix = "/!")
async def start(message: types.Message):
    cmd_variants = (('/rise', '/r', '!rise', '!r'), ('/fall', '/f', '!fall', '!f'))
    act_type = 'rise' if message.text.startswith(cmd_variants[0]) else 'fall'


    # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    BotDB.add_record(message.from_user.id, act_type) 

    if(act_type == 'rise'):
        await message.reply("üìñ –ó–∞–ø–∏—Å—å –æ üòÄ<u><b>–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–∏</b></u> —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–∞!")
    else:
        await message.reply("üìñ –ó–∞–ø–∏—Å—å –æ üí§<u><b>–ó–∞—Å—ã–ø–∞–Ω–∏–∏</b></u> —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω–∞!")


@dp.message_handler(commands = ("history", "h"), commands_prefix = "/!")
async def start(message: types.Message):
    cmd_variants = ('/history', '/h', '!history', '!h')
    within_als = {
        "day": ('today', 'day', '—Å–µ–≥–æ–¥–Ω—è', '–¥–µ–Ω—å'),
        "month": ('month', '–º–µ—Å—è—Ü'),
        "year": ('year', '–≥–æ–¥'),
    }

    cmd = message.text
    for r in cmd_variants:
        cmd = cmd.replace(r, '').strip()

    within = 'day' # default
    # –≤—ã–±–µ—Ä–µ–º —Å –ø–æ–º–æ—â—å—é —Å–ª–æ–≤–∞—Ä—è (–ø–æ –∫–ª—é—á—É) –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞
    if(len(cmd)):
        for k in within_als:
            for als in within_als[k]:
                if(als == cmd):
                    within = k

    # –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏
    records = BotDB.get_records(message.from_user.id, within)
    #–°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ —Ç–∞–±–ª–∏—Ü—ã
    #[(10, 2, 'rise', '2022-04-24 20:53:54', None),
    # (11, 2, 'fall', '2022-04-24 21:07:23', '0:12:57'), 
    # (12, 2, 'rise', '2022-04-24 21:11:30', '0:04:07'), 
    # (13, 2, 'fall', '2022-04-24 21:17:15', '0:05:45')]

    if(len(records)): #–ï—Å–ª–∏ –¥–ª–∏–Ω–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞.
        answer = f"üìñ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ {within_als[within][-1]}üïò\n\n"

        for r in records: #—Ü–∏–∫–ª –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ r - row –≤ records
            answer += "<b>" + ("‚ûñ –£—Å–Ω—É–ª" if not r[2] == 'rise' else "‚ûï –ü—Ä–æ—Å–Ω—É–ª—Å—è") + "</b>"
            answer += f" - {r[3]}\n"
            answer += "<b>" + ("üòÄ –ë–æ–¥—Ä–æ—Å—Ç–≤–æ–≤–∞–ª" if not r[2] == 'rise' else "üí§ –°–ø–∞–ª") + "</b>"
            answer += f" <i>({r[4]})</i>\n\n"

        await message.reply(answer)
    else:
        await message.reply("–ó–∞–ø–∏—Å–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")